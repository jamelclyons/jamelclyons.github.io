{"version":3,"file":"Add.CpLR_Rld.js","sources":["../../../src/model/ProjectDetails.ts","../../../src/views/components/add/AddProject.tsx","../../../src/views/Add.tsx"],"sourcesContent":["class ProjectDetails {\n  detailsList: Array<string> = [];\n  teamList: Array<string> = [];\n  clientID: Array<string> = [];\n\n  constructor(data: Record<string, any> = {}) {\n    this.detailsList = data?.details_list || [];\n    this.teamList = data?.team_list || [];\n    this.clientID = data?.client_id || '';\n  }\n\n  toObject(): Record<string, any> {\n    return {};\n  }\n}\n\nexport default ProjectDetails;\n","import React, { useEffect, useState, ChangeEvent, MouseEvent, SetStateAction } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport type { AppDispatch, RootState } from '../../../model/store';\n\nimport { addProject } from '../../../controllers/addSlice';\nimport {\n  setMessage,\n  setMessageType,\n  setShowStatusBar,\n} from '../../../controllers/messageSlice';\nimport {\n  getProjectTypes,\n  getLanguages,\n  getFrameworks,\n  getTechnologies,\n} from '../../../controllers/taxonomiesSlice';\n\nimport StatusBarComponent from '../StatusBarComponent';\n\nimport Project from '../../../model/Project';\nimport ProjectSolution from '../../../model/ProjectSolution';\nimport ProjectDesign from '../../../model/ProjectDesign';\nimport ProjectDevelopment from '../../../model/ProjectDevelopment';\nimport ProjectDelivery from '../../../model/ProjectDelivery';\nimport ProjectProcess from '../../../model/ProjectProcess';\nimport ProjectProblem from '../../../model/ProjectProblem';\nimport ProjectDetails from '../../../model/ProjectDetails';\nimport Taxonomy from '../../../model/Taxonomy';\n\nconst AddProject: React.FC = () => {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const { addLoading, addSuccessMessage, addErrorMessage } = useSelector(\n    (state: RootState) => state.add\n  );\n  const { projectTypes, languages, frameworks, technologies } = useSelector(\n    (state: RootState) => state.taxonomies\n  );\n\n  const [id, setId] = useState('');\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n  const [types, setTypes] = useState([]);\n  const [description, setDescription] = useState('');\n  const [slug, setSlug] = useState('');\n  // const [design, setDesign] = useState([]);\n  const [designCheckList, setDesignCheckList] = useState([]);\n  const [designGallery, setDesignGallery] = useState([]);\n  const [colorsList, setColorsList] = useState([]);\n  // const [development, setDevelopment] = useState([]);\n  const [developmentCheckList, setDevelopmentCheckList] = useState([]);\n  const [repoURL, setRepoURL] = useState('');\n  const [versionsList, setVersionsList] = useState([]);\n\n  // const [delivery, setDelivery] = useState([]);\n  const [deliveryGallery, setDeliveryGallery] = useState([]);\n  const [deliveryCheckList, setDeliveryCheckList] = useState([]);\n  // const [problem, setProblem] = useState([]);\n  const [problemGallery, setProblemGallery] = useState([]);\n  // const [solution, setSolution] = useState([]);\n  const [solutionGallery, setSolutionGallery] = useState([]);\n  const [urlsList, setUrlsList] = useState([]);\n  const [detailsList, setDetailsList] = useState([]);\n  const [teamList, setTeamList] = useState([]);\n  const [clientID, setClientID] = useState('');\n\n  const [selectedProjectTypes, setSelectedProjectTypes] = useState<Set<string>>(new Set());\n  const [selectedLanguages, setSelectedLanguages] = useState<Set<string>>(new Set());\n  const [selectedFrameworks, setSelectedFrameworks] = useState<Set<string>>(new Set());\n  const [selectedTechnologies, setSelectedTechnologies] = useState<Set<string>>(new Set());\n\n  const handleProjectTypesCheckboxChange = (id: string) => {\n    setSelectedProjectTypes((prevSelectedIds) => {\n      const updatedSelection = new Set(prevSelectedIds);\n      if (updatedSelection.has(id)) {\n        updatedSelection.delete(id);\n      } else {\n        updatedSelection.add(id);\n      }\n      return updatedSelection;\n    });\n  };\n\n  const handleLanguagesCheckboxChange = (id: string) => {\n    setSelectedLanguages((prevSelectedIds) => {\n      const updatedSelection = new Set(prevSelectedIds);\n      if (updatedSelection.has(id)) {\n        updatedSelection.delete(id);\n      } else {\n        updatedSelection.add(id);\n      }\n      return updatedSelection;\n    });\n  };\n\n  const handleFrameworksCheckboxChange = (id: string) => {\n    setSelectedFrameworks((prevSelectedIds) => {\n      const updatedSelection = new Set(prevSelectedIds);\n      if (updatedSelection.has(id)) {\n        updatedSelection.delete(id);\n      } else {\n        updatedSelection.add(id);\n      }\n      return updatedSelection;\n    });\n  };\n\n  const handleTechnologiesCheckboxChange = (id: string) => {\n    setSelectedTechnologies((prevSelectedIds) => {\n      const updatedSelection = new Set(prevSelectedIds);\n      if (updatedSelection.has(id)) {\n        updatedSelection.delete(id);\n      } else {\n        updatedSelection.add(id);\n      }\n      return updatedSelection;\n    });\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    try {\n      const target = e.target as HTMLInputElement;\n\n      const { name, value } = target;\n\n      if (name === 'id') {\n        setId(value);\n      } else if (name === 'title') {\n        setTitle(value);\n      } else if (name === 'status') {\n        setStatus(value);\n      } else if (name === 'description') {\n        setDescription(value);\n      } else if (name === 'slug') {\n        setSlug(value);\n      } else if (name === 'repo_url') {\n        setRepoURL(value);\n      } else if (name === 'client_id') {\n        setClientID(value);\n      }\n    } catch (error) {\n      const err = error as Error;\n      dispatch(setMessage(err.message));\n      dispatch(setMessageType('error'));\n    }\n  };\n\n  const solutionData = {\n    solution_gallery: solutionGallery,\n  };\n\n  const designData = {\n    design_check_list: designCheckList,\n    design_gallery: designGallery,\n    colors_list: colorsList,\n  };\n\n  const developmentData = {\n    development_check_list: developmentCheckList,\n    repo_url: repoURL,\n    versions_list: versionsList,\n  };\n\n  const deliveryData = {\n    delivery_gallery: deliveryGallery,\n    delivery_check_list: deliveryCheckList,\n  };\n\n  const problemData = {};\n\n  const detailsData = {};\n\n  const solution = new ProjectSolution(solutionData);\n\n  const design = new ProjectDesign(designData);\n  const development = new ProjectDevelopment(developmentData);\n  const delivery = new ProjectDelivery(deliveryData);\n  const process = new ProjectProcess(status, design, development, delivery);\n\n  const problem = new ProjectProblem(problemData);\n  const details = new ProjectDetails(detailsData);\n\n  const handleAddProject = async (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    try {\n      const project = new Project(\n        id,\n        title,\n        description,\n        urlsList,\n        solution,\n        process,\n        problem,\n        selectedProjectTypes,\n        selectedLanguages,\n        selectedFrameworks,\n        selectedTechnologies,\n        details\n      );\n\n      dispatch(addProject(project));\n\n      dispatch(setMessageType('info'));\n      dispatch(setMessage('Standbye while an attempt to log you is made.'));\n    } catch (error) {\n      const err = error as Error;\n      dispatch(setMessageType('error'));\n      dispatch(setMessage(err.message));\n      dispatch(setShowStatusBar(Date.now()));\n    }\n  };\n\n  useEffect(() => {\n    if (addLoading) {\n      dispatch(setShowStatusBar(Date.now()));\n    }\n  }, [addLoading]);\n\n  useEffect(() => {\n    if (addSuccessMessage) {\n      dispatch(setMessage(addSuccessMessage));\n      dispatch(setMessageType('success'));\n      dispatch(setShowStatusBar(Date.now()));\n    }\n  }, [addSuccessMessage]);\n\n  useEffect(() => {\n    if (addErrorMessage) {\n      dispatch(setMessage(addErrorMessage));\n      dispatch(setMessageType('error'));\n      dispatch(setShowStatusBar(Date.now()));\n    }\n  }, [addErrorMessage]);\n\n  useEffect(() => {\n    dispatch(getProjectTypes());\n  }, []);\n\n  useEffect(() => {\n    dispatch(getLanguages());\n  }, []);\n\n  useEffect(() => {\n    dispatch(getFrameworks());\n  }, []);\n\n  useEffect(() => {\n    dispatch(getTechnologies());\n  }, []);\n\n  return (\n    <>\n      <main>\n        <h2>Add Project</h2>\n\n        <form action=\"\">\n          <input\n            type=\"text\"\n            name=\"id\"\n            placeholder=\"ID\"\n            value={id}\n            onChange={handleChange}\n          />\n\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={handleChange}\n          />\n\n          <input\n            type=\"text\"\n            name=\"status\"\n            placeholder=\"Status\"\n            value={status}\n            onChange={handleChange}\n          />\n\n          <input\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={description}\n            onChange={handleChange}\n          />\n\n          <h2 className=\"title\">design</h2>\n\n          {/* <input\n            type=\"text\"\n            name=\"design_check_list\"\n            placeholder=\"Design Check List\"\n            value={designCheckList}\n            onChange={handleChange}\n          /> */}\n\n          {/* <input\n            type=\"text\"\n            name=\"design_gallery\"\n            placeholder=\"Design Gallery\"\n            value={designGallery}\n            onChange={handleChange}\n          /> */}\n\n          {/* <input\n            type=\"text\"\n            name=\"colors_list\"\n            placeholder=\"Colors List\"\n            value={colors_list}\n            onChange={handleChange}\n          /> */}\n\n          <h2 className=\"title\">development</h2>\n\n          {/* <input\n            type=\"text\"\n            name=\"development_check_list\"\n            placeholder=\"Development Check List\"\n            value={developmentCheckList}\n            onChange={handleChange}\n          /> */}\n\n          <input\n            type=\"text\"\n            name=\"repo_url\"\n            placeholder=\"Repo URL\"\n            value={repoURL}\n            onChange={handleChange}\n          />\n\n          {/* <input\n            type=\"text\"\n            name=\"versions_list\"\n            placeholder=\"Versions List\"\n            value={versionsList}\n            onChange={handleChange}\n          /> */}\n\n          <div className=\"project-selection\">\n            <label htmlFor=\"options\">Choose Project Types:</label>\n\n            {Array.isArray(projectTypes) &&\n              projectTypes.map((item) => (\n                <div className=\"project-checkbox\" key={item.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`checkbox-${item.id}`}\n                    value={item.id}\n                    checked={selectedProjectTypes.has(item.id)}\n                    onChange={() => handleProjectTypesCheckboxChange(item.id)}\n                  />\n                  <label htmlFor={`checkbox-${item.id}`}>{item.title}</label>\n                </div>\n              ))}\n          </div>\n\n          <div className=\"project-selection\">\n            <label htmlFor=\"options\">Choose Languages:</label>\n\n            {Array.isArray(languages) &&\n              languages.map((item) => (\n                <div className=\"project-checkbox\" key={item.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`checkbox-${item.id}`}\n                    value={item.id}\n                    checked={selectedLanguages.has(item.id)}\n                    onChange={() => handleLanguagesCheckboxChange(item.id)}\n                  />\n                  <label htmlFor={`checkbox-${item.id}`}>{item.title}</label>\n                </div>\n              ))}\n          </div>\n\n          <div className=\"project-selection\">\n            <label htmlFor=\"options\">Choose Frameworks:</label>\n\n            {Array.isArray(frameworks) &&\n              projectTypes.map((item) => (\n                <div className=\"project-checkbox\" key={item.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`checkbox-${item.id}`}\n                    value={item.id}\n                    checked={selectedFrameworks.has(item.id)}\n                    onChange={() => handleFrameworksCheckboxChange(item.id)}\n                  />\n                  <label htmlFor={`checkbox-${item.id}`}>{item.title}</label>\n                </div>\n              ))}\n          </div>\n\n          <div className=\"project-selection\">\n            <label htmlFor=\"options\">Choose Technologies:</label>\n\n            {Array.isArray(technologies) &&\n              technologies.map((item) => (\n                <div className=\"project-checkbox\" key={item.id}>\n                  <input\n                    type=\"checkbox\"\n                    id={`checkbox-${item.id}`}\n                    value={item.id}\n                    checked={selectedTechnologies.has(item.id)}\n                    onChange={() => handleTechnologiesCheckboxChange(item.id)}\n                  />\n                  <label htmlFor={`checkbox-${item.id}`}>{item.title}</label>\n                </div>\n              ))}\n          </div>\n\n          <h2 className=\"title\">delivery</h2>\n\n          {/* <input\n            type=\"text\"\n            name=\"delivery_gallery\"\n            placeholder=\"Delivery Gallery\"\n            value={delivery}\n            onChange={handleChange}\n          /> */}\n\n          {/* <input\n            type=\"text\"\n            name=\"delivery_check_list\"\n            placeholder=\"Delivery Check List\"\n            value={deliveryCheckList}\n            onChange={handleChange}\n          /> */}\n\n          {/* Problem */}\n          {/* Problem Gallery */}\n          {/* Solution */}\n          {/* Solution Gallery */}\n\n          {/* <input\n            type=\"text\"\n            name=\"urls_list\"\n            placeholder=\"URLs List\"\n            value={urlsList}\n            onChange={handleChange}\n          />\n\n          <input\n            type=\"text\"\n            name=\"details_list\"\n            placeholder=\"Details List\"\n            value={detailsList}\n            onChange={handleChange}\n          />\n\n          <input\n            type=\"text\"\n            name=\"team_list\"\n            placeholder=\"Team List\"\n            value={teamList}\n            onChange={handleChange}\n          /> */}\n\n          <input\n            type=\"text\"\n            name=\"client_id\"\n            placeholder=\"client_id\"\n            value={clientID}\n            onChange={handleChange}\n          />\n\n          <button onClick={handleAddProject}>\n            <h3>add</h3>\n          </button>\n        </form>\n\n        <StatusBarComponent />\n      </main>\n    </>\n  );\n}\n\nexport default AddProject;\n","import React from 'react';\n\nimport AddProject from './components/add/AddProject';\n\nconst Add = () => {\n  return (\n    <section className=\"add\">\n      <>\n        <AddProject />\n      </>\n    </section>\n  );\n}\n\nexport default Add;\n"],"names":["ProjectDetails","data","AddProject","dispatch","useDispatch","addLoading","addSuccessMessage","addErrorMessage","useSelector","state","projectTypes","languages","frameworks","technologies","id","setId","useState","title","setTitle","status","setStatus","description","setDescription","slug","setSlug","designCheckList","setDesignCheckList","designGallery","setDesignGallery","colorsList","setColorsList","developmentCheckList","setDevelopmentCheckList","repoURL","setRepoURL","versionsList","setVersionsList","deliveryGallery","setDeliveryGallery","deliveryCheckList","setDeliveryCheckList","solutionGallery","setSolutionGallery","urlsList","setUrlsList","clientID","setClientID","selectedProjectTypes","setSelectedProjectTypes","selectedLanguages","setSelectedLanguages","selectedFrameworks","setSelectedFrameworks","selectedTechnologies","setSelectedTechnologies","handleProjectTypesCheckboxChange","prevSelectedIds","updatedSelection","handleLanguagesCheckboxChange","handleFrameworksCheckboxChange","handleTechnologiesCheckboxChange","handleChange","target","name","value","error","setMessage","setMessageType","solutionData","designData","developmentData","deliveryData","problemData","detailsData","solution","ProjectSolution","design","ProjectDesign","development","ProjectDevelopment","delivery","ProjectDelivery","process","ProjectProcess","problem","ProjectProblem","details","handleAddProject","project","Project","addProject","err","setShowStatusBar","useEffect","getProjectTypes","getLanguages","getFrameworks","getTechnologies","jsx","Fragment","jsxs","item","StatusBarComponent","Add"],"mappings":"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"}